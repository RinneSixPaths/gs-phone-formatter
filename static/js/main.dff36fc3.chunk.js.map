{"version":3,"sources":["app/api/global-entities.ts","app/shared/styled/zoomed-textarea/index.jsx","app/api/excel.service.ts","app/shared/containers/text-copier/text-copier.jsx","app/components/phones-formatter/phones-formatter.jsx","app/api/formatPhones.ts","App.jsx","serviceWorker.js","index.jsx"],"names":["operatorCodes","split","zoomInAnimation","keyframes","zoomIn","ZoomedTextarea","styled","textarea","ExcelService","formattedPhones","needSMS","autocallNumbersRussia","autocallNumbersAbroad","smsNumbersRussia","smsNumbersAbroad","workbook","Excel","worksheetAutocall","addWorksheet","worksheetSms","writeColumnToWorksheet","worksheet","data","columnIndex","columnTitle","rowIndex","getCell","value","forEach","item","DownloadExcel","title","xlsx","writeBuffer","then","fileBuffer","blob","Blob","type","saveAs","autocallRef","React","createRef","smsRef","TextCopierComponent","props","copyToClipboard","el","select","document","execCommand","className","ref","defaultValue","phones","join","Button","icon","color","onClick","current","Icon","name","forSMS","ExportExcelAutoPhones","PhonesFormatterComponent","useState","setPhones","setformattedPhones","setForSMS","disabled","formatted","phoneNumbers","formattedPhoneNumbers","filter","phoneNumber","phoneNumbersItem","phoneArr","formattedPhoneNumber","length","replace","push","number","operatorCode","substring","includes","russianPhoneCall","russianPhoneSms","abroadNumberCall","match","index","getFormattedPhones","content","labelPosition","Checkbox","label","onChange","_","checked","placeholder","event","target","App","Boolean","window","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dff36fc3.chunk.js","sourcesContent":["export interface IFormattedPhones {\r\n    autocallNumbersRussia: Array<string>;\r\n    autocallNumbersAbroad: Array<string>;\r\n    smsNumbersRussia: Array<string>;\r\n    smsNumbersAbroad: Array<string>;\r\n}\r\n\r\nexport const operatorCodes = `903\r\n905\r\n906\r\n909\r\n951\r\n953\r\n960\r\n961\r\n962\r\n963\r\n964\r\n965\r\n966\r\n967\r\n968\r\n910\r\n911\r\n912\r\n913\r\n914\r\n915\r\n916\r\n917\r\n918\r\n919\r\n980\r\n981\r\n982\r\n983\r\n984\r\n985\r\n987\r\n988\r\n989\r\n920\r\n921\r\n922\r\n923\r\n924\r\n925\r\n926\r\n927\r\n928\r\n929\r\n900\r\n901\r\n902\r\n904\r\n908\r\n950\r\n951\r\n952\r\n953\r\n958\r\n977\r\n991\r\n992\r\n993\r\n994\r\n995\r\n996\r\n999\r\n999`.split('\\n');\r\n","import styled, { keyframes } from 'styled-components';\r\nimport { zoomIn } from 'react-animations';\r\n\r\nconst zoomInAnimation = keyframes`${zoomIn}`;\r\n\r\nconst ZoomedTextarea = styled.textarea`\r\n  animation: .5s ${zoomInAnimation};\r\n\r\n  padding: 10px;\r\n  width: 25vw;\r\n  min-width: 300px;\r\n  margin-top: 10px;\r\n  height: 70vh;\r\n  outline: none;\r\n  background-color: rgb(250, 250, 250);\r\n  border: none;\r\n  text-shadow: 1px 1px 1px rgba(0,0,0,0.004);\r\n  text-rendering: optimizeLegibility !important;\r\n  font-size: 21px;\r\n  box-shadow: 0 0px 2px rgba(0,0,0,0.19), 0 2px 2px rgba(0,0,0,0.23);\r\n  line-height: 1.618;\r\n`;\r\n\r\nexport default ZoomedTextarea;\r\n","import * as Excel from \"exceljs\";\r\nimport { saveAs } from \"file-saver\";\r\nimport { IFormattedPhones } from \"./global-entities\";\r\n\r\nexport class ExcelService {\r\n\r\n    public static ExportExcelAutoPhones(formattedPhones: IFormattedPhones, needSMS: boolean): void {\r\n        const {\r\n            autocallNumbersRussia,\r\n            autocallNumbersAbroad,\r\n            smsNumbersRussia,\r\n            smsNumbersAbroad\r\n        } = formattedPhones;\r\n\r\n        const workbook = new Excel.Workbook();\r\n        const worksheetAutocall = workbook.addWorksheet(\"Обзвон\");\r\n\r\n        let worksheetSms = null;\r\n\r\n        const writeColumnToWorksheet = (worksheet: Excel.Worksheet, data: Array<any>, columnIndex: number, columnTitle: string) => {\r\n            let rowIndex = 1;\r\n            worksheet.getCell(rowIndex, columnIndex).value = columnTitle;\r\n            \r\n            data.forEach(item => {\r\n                worksheet.getCell(rowIndex + 1, columnIndex).value = item;\r\n                rowIndex++;\r\n            });\r\n        };\r\n        writeColumnToWorksheet(worksheetAutocall, autocallNumbersRussia, 1, \"Россия\");\r\n        writeColumnToWorksheet(worksheetAutocall, autocallNumbersAbroad, 2, \"Иностранные\");\r\n\r\n        if (needSMS) {\r\n            worksheetSms = workbook.addWorksheet(\"SMS\");\r\n            writeColumnToWorksheet(worksheetSms, smsNumbersRussia, 1, \"Россия\");\r\n            writeColumnToWorksheet(worksheetSms, smsNumbersAbroad, 2, \"Иностранные\");\r\n        }\r\n        ExcelService.DownloadExcel(workbook, 'Phones');\r\n    }\r\n\r\n    private static DownloadExcel(workbook: Excel.Workbook, title: string): void {\r\n        workbook.xlsx.writeBuffer().then(fileBuffer => {\r\n            const blob = new Blob([fileBuffer], { type: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\" });\r\n        \r\n            saveAs(blob, `${title}.xlsx`);\r\n        });\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './text-copier.scss';\r\nimport { Button, Icon } from 'semantic-ui-react';\r\nimport ZoomedTextarea from '../../../shared/styled/zoomed-textarea';\r\nimport { ExcelService } from '../../../api/excel.service';\r\n\r\nconst autocallRef = React.createRef();\r\nconst smsRef = React.createRef();\r\n\r\nconst TextCopierComponent = props => {\r\n    const exportExcel = () => {\r\n        ExcelService.ExportExcelAutoPhones(props.phones, props.forSMS);\r\n    }\r\n\r\n    const copyToClipboard = el => {\r\n        el.select();\r\n        document.execCommand('copy');\r\n    };\r\n\r\n    return (\r\n        <div className=\"text-copier-component\">\r\n            <div className=\"textarea-controll\">\r\n                <ZoomedTextarea\r\n                    ref={autocallRef}\r\n                    defaultValue={`${props.phones.autocallNumbersRussia.join('\\n')}\\n${props.phones.autocallNumbersAbroad.join('\\n')}`}\r\n                />\r\n                <Button icon color=\"teal\" onClick={() => copyToClipboard(autocallRef.current)}>\r\n                    <Icon name='copy' />\r\n                    Автообзвон: Скопировать\r\n                </Button>\r\n            </div>\r\n            {\r\n                props.forSMS &&\r\n                <div className=\"textarea-controll\">\r\n                    <ZoomedTextarea\r\n                        ref={smsRef}\r\n                        defaultValue={`${props.phones.smsNumbersRussia.join('\\n')}\\n${props.phones.smsNumbersAbroad.join('\\n')}`}\r\n                    />\r\n                    <Button icon color=\"teal\" onClick={() => copyToClipboard(smsRef.current)}>\r\n                        <Icon name='copy' />\r\n                        СМС: Скопировать\r\n                    </Button>\r\n                </div>\r\n            }\r\n            <Button icon color=\"green\" onClick={exportExcel}>\r\n              <Icon name='file excel' />\r\n              Скачать EXCEL\r\n            </Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TextCopierComponent;\r\n","import React, { useState } from 'react';\r\nimport './phones-formatter.scss';\r\nimport { Button, Checkbox } from 'semantic-ui-react';\r\nimport { getFormattedPhones } from '../../api/formatPhones';\r\nimport ZoomedTextarea from '../../shared/styled/zoomed-textarea';\r\nimport TextCopierComponent from '../../shared/containers/text-copier/text-copier';\r\n\r\nconst PhonesFormatterComponent = () => {\r\n  const [phones, setPhones] = useState('');\r\n  const [formattedPhones, setformattedPhones] = useState('');\r\n  const [forSMS, setForSMS] = useState(false);\r\n\r\n  const formatPhones = () => {\r\n    const formatted = getFormattedPhones(phones.split('\\n'));\r\n\r\n    if (formatted.autocallNumbersRussia.length || formatted.autocallNumbersAbroad.length) {\r\n      setformattedPhones(formatted);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"phone-formatter-component\">\r\n      {/* Might be a separate component. Phones Formatter */}\r\n      <Button\r\n        disabled={phones ? false : true}\r\n        onClick={formatPhones}\r\n        content=\"Форматировать\"\r\n        icon=\"right arrow\"\r\n        labelPosition=\"right\"\r\n      />\r\n      <Checkbox label=\"Для СМС\" onChange={(_, data) => setForSMS(data.checked)}/>\r\n      <div className=\"textareas\">\r\n        <ZoomedTextarea\r\n          placeholder=\"Вставьте сюда номера телефонов\"\r\n          value={phones}\r\n          onChange={event => setPhones(event.target.value)}\r\n        />\r\n\r\n        {formattedPhones && <TextCopierComponent phones={formattedPhones} forSMS={forSMS}/>}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PhonesFormatterComponent;\r\n","import { operatorCodes, IFormattedPhones } from \"./global-entities\";\r\n\r\nexport const getFormattedPhones = (phoneNumbers: Array<string>): IFormattedPhones => {\r\n    const autocallNumbersRussia = [];\r\n    const autocallNumbersAbroad = [];\r\n    const smsNumbersRussia = [];\r\n    const smsNumbersAbroad = [];\r\n\r\n    const formattedPhoneNumbers = [];\r\n\r\n    phoneNumbers.filter(phoneNumber => !!phoneNumber).forEach(phoneNumbersItem => {\r\n        const phoneArr = phoneNumbersItem.split(' ');\r\n        const lastPhoneNumer = phoneArr[phoneArr.length - 1];\r\n        const formattedPhoneNumber = lastPhoneNumer.replace(/[^0-9]+/g, \"\");\r\n\r\n        if (formattedPhoneNumber) {\r\n            formattedPhoneNumbers.push(formattedPhoneNumber);\r\n        }\r\n    });\r\n\r\n    formattedPhoneNumbers.forEach(number => {\r\n        const operatorCode = number.substring(0, 3);\r\n\r\n        if (\r\n            number[0] === \"7\"\r\n            || number[0] === \"8\"\r\n            || operatorCodes.includes(operatorCode)\r\n        ) {\r\n            let russianPhoneCall = number;\r\n\r\n            if (russianPhoneCall[0] === \"7\") {\r\n                russianPhoneCall = `8${russianPhoneCall.substring(1)}`;\r\n            }\r\n            else if (russianPhoneCall[0] !== \"8\") {\r\n                russianPhoneCall = `8${russianPhoneCall}`;\r\n            }\r\n            autocallNumbersRussia.push(russianPhoneCall);\r\n\r\n            let russianPhoneSms = number;\r\n\r\n            if (russianPhoneSms[0] === \"8\") {\r\n                russianPhoneSms = `7${russianPhoneSms.substring(1)}`;\r\n            }\r\n            else if (russianPhoneSms[0] !== \"7\") {\r\n                russianPhoneSms = `7${russianPhoneSms}`;\r\n            }\r\n            smsNumbersRussia.push(russianPhoneSms);\r\n        }\r\n        else {\r\n            let abroadNumberCall = number;\r\n\r\n            if (abroadNumberCall.match('810') && abroadNumberCall.match('810').index !== 0) {\r\n                abroadNumberCall = `810${abroadNumberCall}`;\r\n            }\r\n            else if (!abroadNumberCall.match('810')) {\r\n                abroadNumberCall = `810${abroadNumberCall}`;\r\n            }\r\n            autocallNumbersAbroad.push(abroadNumberCall);\r\n            smsNumbersAbroad.push(number);\r\n        }\r\n    });\r\n\r\n    return {\r\n        autocallNumbersRussia,\r\n        autocallNumbersAbroad,\r\n        smsNumbersRussia,\r\n        smsNumbersAbroad\r\n    };\r\n}","import React from 'react';\r\nimport './App.scss';\r\nimport PhonesFormatterComponent from './app/components/phones-formatter/phones-formatter';\r\n\r\nconst App = () => {\r\n\r\n  return (<PhonesFormatterComponent/>);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker.js';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'semantic-ui-css/semantic.min.css'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}